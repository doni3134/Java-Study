package map;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class Game {
    public static void main(String[] ar) {
        GameFrame fms = new GameFrame();
    }
}

class GameFrame extends JFrame implements KeyListener, Runnable {
    int f_width;
    int f_height;

    Player player;
    ArrayList<Attack> attackList = new ArrayList<>();

    Thread th;
    Toolkit tk = Toolkit.getDefaultToolkit();
    Image playerImg;
    Image attackImg;

    Image buffImage;
    Graphics buffg;

    boolean isSpaceKeyPressed = false;

    GameFrame() {
        init();
        start();

        setTitle("슈팅 게임 만들기");
        setSize(f_width, f_height);
        Dimension screen = tk.getScreenSize();

        int f_xpos = (int) (screen.getWidth() / 2 - f_width / 2);
        int f_ypos = (int) (screen.getHeight() / 2 - f_height / 2);

        setLocation(f_xpos, f_ypos);
        setResizable(false);
        setVisible(true);
    }

    public void init() {
        f_width = 1280;
        f_height = 900;

        Image originalPlayerImg = tk.getImage("D:\\workspase_intelliJ_IDEA\\javaJazz\\gg\\src\\imgfiles\\ooo.png");
        playerImg = originalPlayerImg.getScaledInstance(100, 100, Image.SCALE_SMOOTH);

        attackImg = tk.getImage("D:\\workspase_intelliJ_IDEA\\javaJazz\\gg\\src\\imgfiles\\attack.png");
        player = new Player(100, 100, playerImg);
    }

    public void start() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        addKeyListener(this);
        th = new Thread(this);
        th.start();
    }

    public void run() {
        try {
            while (true) {
                KeyProcess();
                AttackProcess();
                repaint();
                Thread.sleep(20);
            }
        } catch (Exception e) {
        }
    }

    public void AttackProcess() {
        if (player.isAttackKeyPressed() && !isSpaceKeyPressed) {
            Attack attack = new Attack(player.getX(), player.getY(), player.getPrevKeyCode(), attackImg);
            attackList.add(attack);
            isSpaceKeyPressed = true;
        }

        for (int i = 0; i < attackList.size(); ++i) {
            Attack attack = attackList.get(i);
            attack.move();

            if (attack.getX() > f_width) {
                attackList.remove(i);
            }
        }
    }

    public void paint(Graphics g) {
        buffImage = createImage(f_width, f_height);
        buffg = buffImage.getGraphics();

        DrawPlayer();
        DrawAttacks();

        g.drawImage(buffImage, 0, 0, this);
    }

    public void DrawPlayer() {
        buffg.clearRect(0, 0, f_width, f_height);
        // 맵 이미지
        Image mapImg = tk.getImage("D:\\workspase_intelliJ_IDEA\\javaJazz\\gg\\src\\imgfiles\\map.jpg");
        buffg.drawImage(mapImg, 0, 0, 1280, 900, null);

        player.draw(buffg);
    }

    public void DrawAttacks() {
        for (int i = 0; i < attackList.size(); ++i) {
            Attack attack = attackList.get(i);
            attack.draw(buffg);

            if (attack.getX() > f_width) {
                attackList.remove(i);
            }
        }
    }

    public void keyPressed(KeyEvent e) {
        int keyCode = e.getKeyCode();
        player.setPrevKeyCode(keyCode);

        switch (keyCode) {
            case KeyEvent.VK_LEFT:
            case KeyEvent.VK_RIGHT:
            case KeyEvent.VK_UP:
            case KeyEvent.VK_DOWN:
                player.setAttackKeyPressed(false);
                break;
            case KeyEvent.VK_SPACE:
                player.setAttackKeyPressed(true);
                break;
        }
    }

    public void keyReleased(KeyEvent e) {
        int keyCode = e.getKeyCode();

        switch (keyCode) {
            case KeyEvent.VK_SPACE:
                player.setAttackKeyPressed(false);
                isSpaceKeyPressed = false;
                break;
        }
    }

    public void keyTyped(KeyEvent e) {}

    public void KeyProcess() {
        player.keyProcess();
    }

    class Player {
        private int x;
        private int y;
        private int prevKeyCode;
        private boolean attackKeyPressed;
        private Image image;

        Player(int x, int y, Image image) {
            this.x = x;
            this.y = y;
            this.image = image;
            attackKeyPressed = false;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public int getPrevKeyCode() {
            return prevKeyCode;
        }

        public boolean isAttackKeyPressed() {
            return attackKeyPressed;
        }

        public void setPrevKeyCode(int prevKeyCode) {
            this.prevKeyCode = prevKeyCode;
        }

        public void setAttackKeyPressed(boolean attackKeyPressed) {
            this.attackKeyPressed = attackKeyPressed;
        }

        public void draw(Graphics g) {
            g.drawImage(image, x, y, null);
        }

        public void keyProcess() {
            if (prevKeyCode == KeyEvent.VK_LEFT) {
                x -= 5;
            } else if (prevKeyCode == KeyEvent.VK_RIGHT) {
                x += 5;
            } else if (prevKeyCode == KeyEvent.VK_UP) {
                y -= 5;
            } else if (prevKeyCode == KeyEvent.VK_DOWN) {
                y += 5;
            }
        }
    }

    class Attack {
        private int x;
        private int y;
        private int speed;
        private int direction;
        private Image image;

        Attack(int x, int y, int direction, Image image) {
            this.x = x;
            this.y = y;
            this.direction = direction;
            this.image = image;
            speed = 10;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public void move() {
            switch (direction) {
                case KeyEvent.VK_UP:
                    y -= speed;
                    break;
                case KeyEvent.VK_DOWN:
                    y += speed;
                    break;
                case KeyEvent.VK_LEFT:
                    x -= speed;
                    break;
                case KeyEvent.VK_RIGHT:
                    x += speed;
                    break;
            }
        }


        public void draw(Graphics g) {
            g.drawImage(image, x, y, null);
        }
    }
}
